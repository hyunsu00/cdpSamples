// sudo dnf install json-devel
// sudo apt-get install nlohmann-json3-dev
#include <iostream>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <nlohmann/json.hpp>

using json = nlohmann::json;

#include <iostream>

int main() {
    int pipefd[2];
    
    if (pipe(pipefd) == -1) {
        std::cerr << "파이프 생성 실패" << std::endl;
        return 1;
    }

    pid_t pid = fork();
    if (pid == -1) {
        std::cerr << "fork 실패" << std::endl;
        return 1;
    }

    if (pid == 0) {
        // 자식 프로세스
        close(pipefd[1]); // 쓰기용 파이프 닫기

        // 파이프를 표준 입력으로 리디렉션
        dup2(pipefd[0], STDIN_FILENO);
        close(pipefd[0]);

        // Chrome 실행
        execl("/opt/google/chrome/chrome", "--headless", "--remote-debugging-pipe", "3<&0", "4>&1");

        // execl이 실패하면
        std::cerr << "Chrome 실행 실패" << std::endl;
        return 1;
    } else {
        // 부모 프로세스
        close(pipefd[0]); // 읽기용 파이프 닫기

        // 명령 생성
        json command = {
            {"id", 1},
            {"method", "Page.navigate"},
            {"params", {{"url", "https://www.naver.com"}}}
        };

        // 명령 전송
        std::string command_str = command.dump();
        write(pipefd[1], command_str.c_str(), command_str.size());

        // 응답 읽기
        char buffer[4096];
        int n = read(pipefd[1], buffer, sizeof(buffer));
        if (n > 0) {
            std::string response(buffer, n);
            std::cout << "응답: " << response << std::endl;
        }

        close(pipefd[1]);

        // 자식 프로세스 종료 대기
        wait(NULL);
    }

    return 0;
}