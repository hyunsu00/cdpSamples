#include <iostream>
#include <string>
#include <curl/curl.h>
#include <json/json.h>
#include <fstream>
#include <sstream>

// Callback function for libcurl
size_t WriteCallback(void* contents, size_t size, size_t nmemb, void* userp) {
    ((std::string*)userp)->append((char*)contents, size * nmemb);
    return size * nmemb;
}

// Function to take screenshot using Chrome DevTools Protocol
std::string takeScreenshot(const std::string& url) {
    CURL* curl;
    CURLcode res;
    std::string readBuffer;

    // Initialize CURL
    curl = curl_easy_init();
    if(curl) {
        // Set URL for creating a new page
        curl_easy_setopt(curl, CURLOPT_URL, "http://localhost:9222/json/version");
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);
        res = curl_easy_perform(curl);

        if(res != CURLE_OK) {
            std::cerr << "curl_easy_perform() failed: " << curl_easy_strerror(res) << std::endl;
            return "";
        }

        // Parse the JSON response to get the webSocketDebuggerUrl
        Json::CharReaderBuilder reader;
        Json::Value obj;
        std::string errs;
        std::istringstream s(readBuffer);
        std::string webSocketDebuggerUrl;

        if (Json::parseFromStream(reader, s, &obj, &errs)) {
            webSocketDebuggerUrl = obj["webSocketDebuggerUrl"].asString();
        }

        // Navigate to the target URL
        std::string navigateCommand = "{\"id\": 1, \"method\": \"Page.navigate\", \"params\": {\"url\": \"" + url + "\"}}";
        curl_easy_setopt(curl, CURLOPT_URL, webSocketDebuggerUrl.c_str());
        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, navigateCommand.c_str());
        readBuffer.clear();
        res = curl_easy_perform(curl);

        if(res != CURLE_OK) {
            std::cerr << "curl_easy_perform() failed: " << curl_easy_strerror(res) << std::endl;
            return "";
        }

        // Capture the screenshot
        std::string screenshotCommand = "{\"id\": 2, \"method\": \"Page.captureScreenshot\"}";
        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, screenshotCommand.c_str());
        readBuffer.clear();
        res = curl_easy_perform(curl);

        if(res != CURLE_OK) {
            std::cerr << "curl_easy_perform() failed: " << curl_easy_strerror(res) << std::endl;
            return "";
        }

        // Parse the JSON response to get the screenshot data
        if (Json::parseFromStream(reader, s, &obj, &errs)) {
            std::string screenshotData = obj["result"]["data"].asString();
            return screenshotData;
        }

        // Cleanup CURL
        curl_easy_cleanup(curl);
    }
    return "";
}

// Function to save screenshot to file
void saveScreenshot(const std::string& base64Data, const std::string& filename) {
    std::ofstream file(filename, std::ios::binary);
    file << base64Data;
    file.close();
}

int main() {
    std::string url = "https://www.naver.com";
    std::string screenshotData = takeScreenshot(url);

    if (!screenshotData.empty()) {
        saveScreenshot(screenshotData, "screenshot.png");
        std::cout << "Screenshot saved successfully." << std::endl;
    } else {
        std::cerr << "Failed to take screenshot." << std::endl;
    }

    return 0;
}
